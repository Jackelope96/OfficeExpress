// Generated 26 Jun 2019 23:30 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.Server.General
{
  [Serializable]
  public class GeneralUser
   : SingularBusinessBase<GeneralUser>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "ID");
    /// <summary>
    /// Gets and sets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key,
    Required(ErrorMessage = "ID required")]
    public int UserID
    {
      get { return GetProperty(UserIDProperty); }
      set { SetProperty(UserIDProperty, value); }
    }

    public static PropertyInfo<string> FirstNameProperty = RegisterProperty<string>(c => c.FirstName, "First Name");
    /// <summary>
    /// Gets and sets the First Name value
    /// </summary>
    [Display(Name = "First Name", Description = "")]
    public string FirstName
    {
      get { return GetProperty(FirstNameProperty); }
      set { SetProperty(FirstNameProperty, value); }
    }

    public static PropertyInfo<string> LastNameProperty = RegisterProperty<string>(c => c.LastName, "Last Name");
    /// <summary>
    /// Gets and sets the Last Name value
    /// </summary>
    [Display(Name = "Last Name", Description = "")]
    public string LastName
    {
      get { return GetProperty(LastNameProperty); }
      set { SetProperty(LastNameProperty, value); }
    }

    public static PropertyInfo<string> UserNameProperty = RegisterProperty<string>(c => c.UserName, "User Name");
    /// <summary>
    /// Gets and sets the User Name value
    /// </summary>
    [Display(Name = "User Name", Description = "")]
    public string UserName
    {
      get { return GetProperty(UserNameProperty); }
      set { SetProperty(UserNameProperty, value); }
    }

    public static PropertyInfo<Byte[]> PasswordProperty = RegisterProperty<Byte[]>(c => c.Password, "Password");
    /// <summary>
    /// Gets and sets the Password value
    /// </summary>
    [Display(Name = "Password", Description = ""),
    Required(ErrorMessage = "Password required")]
    public Byte[] Password
    {
      get { return GetProperty(PasswordProperty); }
      set { SetProperty(PasswordProperty, value); }
    }

    public static PropertyInfo<Byte[]> SaltProperty = RegisterProperty<Byte[]>(c => c.Salt, "Salt");
    /// <summary>
    /// Gets and sets the Salt value
    /// </summary>
    [Display(Name = "Salt", Description = ""),
    Required(ErrorMessage = "Salt required")]
    public Byte[] Salt
    {
      get { return GetProperty(SaltProperty); }
      set { SetProperty(SaltProperty, value); }
    }

    public static PropertyInfo<string> RFIDProperty = RegisterProperty<string>(c => c.RFID, "RF");
    /// <summary>
    /// Gets and sets the RF value
    /// </summary>
    [Display(Name = "RF", Description = "")]
    public string RFID
    {
      get { return GetProperty(RFIDProperty); }
      set { SetProperty(RFIDProperty, value); }
    }

    public static PropertyInfo<DateTime> PasswordChangeDateProperty = RegisterProperty<DateTime>(c => c.PasswordChangeDate, "Password Change Date");
    /// <summary>
    /// Gets and sets the Password Change Date value
    /// </summary>
    [Display(Name = "Password Change Date", Description = ""),
    Required(ErrorMessage = "Password Change Date required")]
    public DateTime PasswordChangeDate
    {
      get
      {
        return GetProperty(PasswordChangeDateProperty);
      }
      set
      {
        SetProperty(PasswordChangeDateProperty, value);
      }
    }

    public static PropertyInfo<DateTime> CreatedDateProperty = RegisterProperty<DateTime>(c => c.CreatedDate, "Created Date");
    /// <summary>
    /// Gets the Created Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public DateTime CreatedDate
    {
      get { return GetProperty(CreatedDateProperty); }
    }

    public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By");
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<Boolean> FirstTimeLoginProperty = RegisterProperty<Boolean>(c => c.FirstTimeLogin, "First Time Login", false);
    /// <summary>
    /// Gets and sets the First Time Login value
    /// </summary>
    [Display(Name = "First Time Login", Description = ""),
    Required(ErrorMessage = "First Time Login required")]
    public Boolean FirstTimeLogin
    {
      get { return GetProperty(FirstTimeLoginProperty); }
      set { SetProperty(FirstTimeLoginProperty, value); }
    }

    public static PropertyInfo<string> EmailAddressProperty = RegisterProperty<string>(c => c.EmailAddress, "Email Address");
    /// <summary>
    /// Gets and sets the Email Address value
    /// </summary>
    [Display(Name = "Email Address", Description = "")]
    public string EmailAddress
    {
      get { return GetProperty(EmailAddressProperty); }
      set { SetProperty(EmailAddressProperty, value); }
    }

    public static PropertyInfo<int> DeductIDProperty = RegisterProperty<int>(c => c.DeductID, "Deduct");
    /// <summary>
    /// Gets and sets the Deduct value
    /// </summary>
    [Display(Name = "Deduct", Description = ""),
    Required(ErrorMessage = "Deduct required")]
    public int DeductID
    {
      get { return GetProperty(DeductIDProperty); }
      set { SetProperty(DeductIDProperty, value); }
    }

    public static PropertyInfo<int> ResetStateProperty = RegisterProperty<int>(c => c.ResetState, "Reset State");
    /// <summary>
    /// Gets and sets the Reset State value
    /// </summary>
    [Display(Name = "Reset State", Description = ""),
    Required(ErrorMessage = "Reset State required")]
    public int ResetState
    {
      get { return GetProperty(ResetStateProperty); }
      set { SetProperty(ResetStateProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(UserIDProperty);
    }

    public override string ToString()
    {
      if (this.FirstName.Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "General User");
        }
        else
        {
          return String.Format("Blank {0}", "General User");
        }
      }
      else
      {
        return this.FirstName;
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewGeneralUser() method.
    }

    public static GeneralUser NewGeneralUser()
    {
      return DataPortal.CreateChild<GeneralUser>();
    }

    public GeneralUser()
    {
      MarkAsChild();
    }

    internal static GeneralUser GetGeneralUser(SafeDataReader dr)
    {
      var g = new GeneralUser();
      g.Fetch(dr);
      return g;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(UserIDProperty, sdr.GetInt32(i++));
        LoadProperty(FirstNameProperty, sdr.GetString(i++));
        LoadProperty(LastNameProperty, sdr.GetString(i++));
        LoadProperty(UserNameProperty, sdr.GetString(i++));
        LoadProperty(PasswordProperty, sdr.GetValue(i++));
        LoadProperty(SaltProperty, sdr.GetValue(i++));
        LoadProperty(RFIDProperty, sdr.GetString(i++));
        LoadProperty(PasswordChangeDateProperty, sdr.GetValue(i++));
        LoadProperty(CreatedDateProperty, sdr.GetDateTime(i++));
        LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
        LoadProperty(FirstTimeLoginProperty, sdr.GetBoolean(i++));
        LoadProperty(EmailAddressProperty, sdr.GetString(i++));
        LoadProperty(DeductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
        LoadProperty(ResetStateProperty, sdr.GetInt32(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      if (this.IsNew)
      {
        LoadProperty(CreatedByProperty, Settings.CurrentUser.UserID);
      }

      AddPrimaryKeyParam(cm, UserIDProperty);

      cm.Parameters.AddWithValue("@FirstName", GetProperty(FirstNameProperty));
      cm.Parameters.AddWithValue("@LastName", GetProperty(LastNameProperty));
      cm.Parameters.AddWithValue("@UserName", GetProperty(UserNameProperty));
      cm.Parameters.AddWithValue("@Password", GetProperty(PasswordProperty));
      cm.Parameters.AddWithValue("@Salt", GetProperty(SaltProperty));
      cm.Parameters.AddWithValue("@RFID", GetProperty(RFIDProperty));
      cm.Parameters.AddWithValue("@PasswordChangeDate", PasswordChangeDate);
      cm.Parameters.AddWithValue("@CreatedBy", GetProperty(CreatedByProperty));
      cm.Parameters.AddWithValue("@FirstTimeLogin", GetProperty(FirstTimeLoginProperty));
      cm.Parameters.AddWithValue("@EmailAddress", GetProperty(EmailAddressProperty));
      cm.Parameters.AddWithValue("@DeductID", GetProperty(DeductIDProperty));
      cm.Parameters.AddWithValue("@ResetState", GetProperty(ResetStateProperty));

      return (scm) =>
      {
  // Post Save
  if (this.IsNew)
        {
          LoadProperty(UserIDProperty, scm.Parameters["@UserID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
    }

    #endregion

  }

}