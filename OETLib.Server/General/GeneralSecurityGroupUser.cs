// Generated 15 Oct 2019 20:23 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Singular;


namespace OETLib.Server.General
{
  [Serializable]
  public class GeneralSecurityGroupUser
   : SingularBusinessBase<GeneralSecurityGroupUser>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> SecurityGroupUserIDProperty = RegisterProperty<int>(c => c.SecurityGroupUserID, "ID");
    /// <summary>
    /// Gets and sets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key,
    Required(ErrorMessage = "ID required")]
    public int SecurityGroupUserID
    {
      get { return GetProperty(SecurityGroupUserIDProperty); }
      set { SetProperty(SecurityGroupUserIDProperty, value); }
    }

    public static PropertyInfo<int> SecurityGroupIDProperty = RegisterProperty<int>(c => c.SecurityGroupID, "Security Group");
    /// <summary>
    /// Gets and sets the Security Group value
    /// </summary>
    [Display(Name = "Security Group", Description = ""),
    Required(ErrorMessage = "Security Group required")]
    public int SecurityGroupID
    {
      get { return GetProperty(SecurityGroupIDProperty); }
      set { SetProperty(SecurityGroupIDProperty, value); }
    }

    public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "User");
    /// <summary>
    /// Gets and sets the User value
    /// </summary>
    [Display(Name = "User", Description = ""),
    Required(ErrorMessage = "User required")]
    public int UserID
    {
      get { return GetProperty(UserIDProperty); }
      set { SetProperty(UserIDProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(SecurityGroupUserIDProperty);
    }

    public override string ToString()
    {
      if (this.SecurityGroupUserID.ToString().Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "General Security Group User");
        }
        else
        {
          return String.Format("Blank {0}", "General Security Group User");
        }
      }
      else
      {
        return this.SecurityGroupUserID.ToString();
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewGeneralSecurityGroupUser() method.
    }

    public static GeneralSecurityGroupUser NewGeneralSecurityGroupUser()
    {
      return DataPortal.CreateChild<GeneralSecurityGroupUser>();
    }

    public GeneralSecurityGroupUser()
    {
      MarkAsChild();
    }

    internal static GeneralSecurityGroupUser GetGeneralSecurityGroupUser(SafeDataReader dr)
    {
      var g = new GeneralSecurityGroupUser();
      g.Fetch(dr);
      return g;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(SecurityGroupUserIDProperty, sdr.GetInt32(i++));
        LoadProperty(SecurityGroupIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
        LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      AddPrimaryKeyParam(cm, SecurityGroupUserIDProperty);

      cm.Parameters.AddWithValue("@SecurityGroupID", GetProperty(SecurityGroupIDProperty));
      cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));

      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(SecurityGroupUserIDProperty, scm.Parameters["@SecurityGroupUserID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@SecurityGroupUserID", GetProperty(SecurityGroupUserIDProperty));
    }

    #endregion

  }

}