// Generated 19 Feb 2019 13:26 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.BusinessObjects.Model
{
    [Serializable]
    public class OrderDetail
     : SingularBusinessBase<OrderDetail>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int?> orderIDProperty = RegisterProperty<int?>(c => c.OrderID, "Order", null);
        /// <summary>
        /// Gets and sets the Order value
        /// </summary>
        [Display(Name = "Order", Description = ""),
        Required(ErrorMessage = "Order required")]
        public int? OrderID
        {
            get { return GetProperty(orderIDProperty); }
            set { SetProperty(orderIDProperty, value); }
        }

        public static PropertyInfo<int?> ProductIDProperty = RegisterProperty<int?>(c => c.ProductID, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int? ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<int> ProductQuantityProperty = RegisterProperty<int>(c => c.ProductQuantity, "Product Quantity", 0);
        /// <summary>
        /// Gets and sets the Product Quantity value
        /// </summary>
        [Display(Name = "Product Quantity", Description = ""),
        Required(ErrorMessage = "Product Quantity required")]
        public int ProductQuantity
        {
            get { return GetProperty(ProductQuantityProperty); }
            set { SetProperty(ProductQuantityProperty, value); }
        }

        public static PropertyInfo<decimal> UnitPriceProperty = RegisterProperty<decimal>(c => c.UnitPrice, "Unit Price", (decimal)0);
        /// <summary>
        /// Gets and sets the Unit Price value
        /// </summary>
        [Display(Name = "Unit Price", Description = ""),
        Required(ErrorMessage = "Unit Price required")]
        public decimal UnitPrice
        {
            get { return GetProperty(UnitPriceProperty); }
            set { SetProperty(UnitPriceProperty, value); }
        }

        public static PropertyInfo<int> OrderDetailsIDProperty = RegisterProperty<int>(c => c.OrderDetailsID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderDetailsID
        {
            get { return GetProperty(OrderDetailsIDProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderDetailsIDProperty);
        }

        public override string ToString()
        {
            if (this.OrderID.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order Detail");
                }
                else
                {
                    return String.Format("Blank {0}", "Order Detail");
                }
            }
            else
            {
                return this.OrderID.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrderDetail() method.
        }

        public static OrderDetail NewOrderDetail()
        {
            return DataPortal.CreateChild<OrderDetail>();
        }

        public OrderDetail()
        {
            MarkAsChild();
        }

        internal static OrderDetail GetOrderDetail(SafeDataReader dr)
        {
            var o = new OrderDetail();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(orderIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(UnitPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(OrderDetailsIDProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@orderID", GetProperty(orderIDProperty));
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
            cm.Parameters.AddWithValue("@ProductQuantity", GetProperty(ProductQuantityProperty));
            cm.Parameters.AddWithValue("@UnitPrice", GetProperty(UnitPriceProperty));
            AddPrimaryKeyParam(cm, OrderDetailsIDProperty);


            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderDetailsIDProperty, scm.Parameters["@OrderDetailsID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderDetailsID", GetProperty(OrderDetailsIDProperty));
        }

        #endregion

    }

}