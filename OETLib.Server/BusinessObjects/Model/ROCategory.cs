// Generated 07 Feb 2019 15:06 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.BusinessObjects.Model
{
    [Serializable]
    public class ROCategory
     : SingularReadOnlyBase<ROCategory>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> CategoryIDProperty = RegisterProperty<int>(c => c.CategoryID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int CategoryID
        {
            get { return GetProperty(CategoryIDProperty); }
        }

        public static PropertyInfo<string> CategoryNameProperty = RegisterProperty<string>(c => c.CategoryName, "Category Name", "");
        /// <summary>
        /// Gets the Category Name value
        /// </summary>
        [Display(Name = "Category Name", Description = "")]
        public string CategoryName
        {
            get { return GetProperty(CategoryNameProperty); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date");
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(CategoryIDProperty);
        }

        public override string ToString()
        {
            return this.CategoryName;
        }

        #endregion

        #endregion

        #region " Data Access & Factory Methods "

        internal static ROCategory GetROCategory(SafeDataReader dr)
        {
            var r = new ROCategory();
            r.Fetch(dr);
            return r;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            int i = 0;
            LoadProperty(CategoryIDProperty, sdr.GetInt32(i++));
            LoadProperty(CategoryNameProperty, sdr.GetString(i++));
            LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
        }

        #endregion

    }

}