// Generated 05 Mar 2019 08:48 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.BusinessObjects.Model
{
    [Serializable]
    public class EditInventory
     : SingularBusinessBase<EditInventory>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<string> ProductNameProperty = RegisterProperty<string>(c => c.ProductName, "ID");
        /// <summary>
        /// Gets and sets the ID value
        /// </summary>
        [Display(Name = "ID", Description = "")]
        public string ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<int> InventoryQuantityProperty = RegisterProperty<int>(c => c.InventoryQuantity, "Inventory Quantity");
        /// <summary>
        /// Gets and sets the Inventory Quantity value
        /// </summary>
        [Display(Name = "Inventory Quantity", Description = ""),
        Required(ErrorMessage = "Inventory Quantity required")]
        public int InventoryQuantity
        {
            get { return GetProperty(InventoryQuantityProperty); }
            set { SetProperty(InventoryQuantityProperty, value); }
        }

        public static PropertyInfo<int> CurrentInventoryQuantityProperty = RegisterProperty<int>(c => c.CurrentInventoryQuantity, "Current Inventory Quantity");
        /// <summary>
        /// Gets and sets the Current Inventory Quantity value
        /// </summary>
        [Display(Name = "Current Inventory Quantity", Description = ""),
        Required(ErrorMessage = "Current Inventory Quantity required")]
        public int CurrentInventoryQuantity
        {
            get { return GetProperty(CurrentInventoryQuantityProperty); }
            set { SetProperty(CurrentInventoryQuantityProperty, value); }
        }

        public static PropertyInfo<int> InventoryTypeProperty = RegisterProperty<int>(c => c.InventoryType, "Inventory Type");
        /// <summary>
        /// Gets and sets the Inventory Type value
        /// </summary>
        [Display(Name = "Inventory Type", Description = ""),
        Required(ErrorMessage = "Inventory Type required")]
        public int InventoryType
        {
            get { return GetProperty(InventoryTypeProperty); }
            set { SetProperty(InventoryTypeProperty, value); }
        }

        public static PropertyInfo<decimal> InventoryItemCostProperty = RegisterProperty<decimal>(c => c.InventoryItemCost, "Inventory Item Cost");
        /// <summary>
        /// Gets and sets the Inventory Item Cost value
        /// </summary>
        [Display(Name = "Inventory Item Cost", Description = ""),
        Required(ErrorMessage = "Inventory Item Cost required")]
        public decimal InventoryItemCost
        {
            get { return GetProperty(InventoryItemCostProperty); }
            set { SetProperty(InventoryItemCostProperty, value); }
        }

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "Product");
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<int> InventoryIDProperty = RegisterProperty<int>(c => c.InventoryID, "ID");
        /// <summary>
        /// Gets and sets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key,
        Required(ErrorMessage = "ID required")]
        public int InventoryID
        {
            get { return GetProperty(InventoryIDProperty); }
            set { SetProperty(InventoryIDProperty, value); }
        }

        private int _InventoryAmount = 0;
        public int InventoryAmount
        {
            get
            {
                return _InventoryAmount;
            }
            set
            {
                _InventoryAmount = value;
            }
        }

        public bool _AddStatus = true;
        public bool AddStatus
        {
            get
            {
                return _AddStatus;
            }
            set
            {
                _AddStatus = value;
            }
        }
        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(InventoryIDProperty);
        }

        public override string ToString()
        {
            if (this.ProductName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Edit Inventory");
                }
                else
                {
                    return String.Format("Blank {0}", "Edit Inventory");
                }
            }
            else
            {
                return this.ProductName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewEditInventory() method.
        }

        public static EditInventory NewEditInventory()
        {
            return DataPortal.CreateChild<EditInventory>();
        }

        public EditInventory()
        {
            MarkAsChild();
        }

        internal static EditInventory GetEditInventory(SafeDataReader dr)
        {
            var e = new EditInventory();
            e.Fetch(dr);
            return e;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(InventoryQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(CurrentInventoryQuantityProperty, sdr.GetInt32(i++));
                LoadProperty(InventoryTypeProperty, sdr.GetInt32(i++));
                LoadProperty(InventoryItemCostProperty, sdr.GetDecimal(i++));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(InventoryIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@ProductName", GetProperty(ProductNameProperty));
            cm.Parameters.AddWithValue("@InventoryQuantity", GetProperty(InventoryQuantityProperty));
            cm.Parameters.AddWithValue("@CurrentInventoryQuantity", GetProperty(CurrentInventoryQuantityProperty));
            cm.Parameters.AddWithValue("@InventoryType", GetProperty(InventoryTypeProperty));
            cm.Parameters.AddWithValue("@InventoryItemCost", GetProperty(InventoryItemCostProperty));
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
            AddPrimaryKeyParam(cm, InventoryIDProperty);


            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(InventoryIDProperty, scm.Parameters["@InventoryID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@InventoryID", GetProperty(InventoryIDProperty));
        }

        #endregion

    }

}