// Generated 01 Mar 2019 13:47 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Singular;


namespace OETLib.BusinessObjects.Model
{
  [Serializable]
  public class Inventory
   : SingularBusinessBase<Inventory>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> InventoryIDProperty = RegisterProperty<int>(c => c.InventoryID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int InventoryID
    {
      get { return GetProperty(InventoryIDProperty); }
    }

    public static PropertyInfo<int?> ProductIDProperty = RegisterProperty<int?>(c => c.ProductID, "Product", null);
    /// <summary>
    /// Gets and sets the Product value
    /// </summary>
    [Display(Name = "Product", Description = ""),
    Required(ErrorMessage = "Product required")]
    public int? ProductID
    {
      get { return GetProperty(ProductIDProperty); }
      set { SetProperty(ProductIDProperty, value); }
    }

    public static PropertyInfo<int?> InventoryQuantityProperty = RegisterProperty<int?>(c => c.InventoryQuantity, "Inventory Quantity", (int?)null);
    /// <summary>
    /// Gets and sets the Inventory Quantity value
    /// </summary>
    [Display(Name = "Inventory Quantity", Description = "")]
    public int? InventoryQuantity
    {
      get { return GetProperty(InventoryQuantityProperty); }
      set { SetProperty(InventoryQuantityProperty, value); }
    }

    public static PropertyInfo<int?> CurrentInventoryQuantityProperty = RegisterProperty<int?>(c => c.CurrentInventoryQuantity, "Current Inventory Quantity", (int?)null);
    /// <summary>
    /// Gets and sets the Current Inventory Quantity value
    /// </summary>
    [Display(Name = "Current Inventory Quantity", Description = "")]
    public int? CurrentInventoryQuantity
    {
      get { return GetProperty(CurrentInventoryQuantityProperty); }
      set { SetProperty(CurrentInventoryQuantityProperty, value); }
    }

    public static PropertyInfo<decimal?> InventoryItemCostProperty = RegisterProperty<decimal?>(c => c.InventoryItemCost, "Inventory Item Cost", (decimal?)null);
    /// <summary>
    /// Gets and sets the Inventory Item Cost value
    /// </summary>
    [Display(Name = "Inventory Item Cost", Description = "")]
    public decimal? InventoryItemCost
    {
      get { return GetProperty(InventoryItemCostProperty); }
      set { SetProperty(InventoryItemCostProperty, value); }
    }

    public static PropertyInfo<int?> InventoryTypeIDProperty = RegisterProperty<int?>(c => c.InventoryTypeID, "Inventory Type", (int?)null);
    /// <summary>
    /// Gets and sets the Inventory Type value
    /// </summary>
    [Display(Name = "Inventory Type", Description = "")]
    public int? InventoryTypeID
    {
      get { return GetProperty(InventoryTypeIDProperty); }
      set { SetProperty(InventoryTypeIDProperty, value); }
    }

    public static PropertyInfo<SmartDate?> CreatedDateProperty = RegisterProperty<SmartDate?>(c => c.CreatedDate, "Created Date");
    /// <summary>
    /// Gets the Created Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate? CreatedDate
    {
      get { return GetProperty(CreatedDateProperty); }
    }

    public static PropertyInfo<int?> OrderIDProperty = RegisterProperty<int?>(c => c.OrderID, "OrderID", null);
    /// <summary>
    /// Gets and sets the Product value
    /// </summary>
    [Display(Name = "OrderID", Description = ""),
    Required(ErrorMessage = "OrderID required")]
    public int? OrderID
    {
      get { return GetProperty(OrderIDProperty); }
      set { SetProperty(OrderIDProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(InventoryIDProperty);
    }

    public override string ToString()
    {
      if (this.CreatedDate.ToString().Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Inventory");
        }
        else
        {
          return String.Format("Blank {0}", "Inventory");
        }
      }
      else
      {
        return this.CreatedDate.ToString();
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewInventory() method.
    }

    public static Inventory NewInventory()
    {
      return DataPortal.CreateChild<Inventory>();
    }

    public Inventory()
    {
      MarkAsChild();
    }

    internal static Inventory GetInventory(SafeDataReader dr)
    {
      var i = new Inventory();
      i.Fetch(dr);
      return i;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(InventoryIDProperty, sdr.GetInt32(i++));
        LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
        LoadProperty(InventoryQuantityProperty, sdr.GetValue(i++));
        LoadProperty(CurrentInventoryQuantityProperty, sdr.GetValue(i++));
        LoadProperty(InventoryItemCostProperty, sdr.GetValue(i++));
        LoadProperty(InventoryTypeIDProperty, sdr.GetValue(i++));
        LoadProperty(CreatedDateProperty, sdr.GetDateTime(i++));
        LoadProperty(OrderIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      AddPrimaryKeyParam(cm, InventoryIDProperty);

      cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
      cm.Parameters.AddWithValue("@InventoryQuantity", Singular.Misc.NothingDBNull(GetProperty(InventoryQuantityProperty)));
      cm.Parameters.AddWithValue("@CurrentInventoryQuantity", Singular.Misc.NothingDBNull(GetProperty(CurrentInventoryQuantityProperty)));
      cm.Parameters.AddWithValue("@InventoryItemCost", Singular.Misc.NothingDBNull(GetProperty(InventoryItemCostProperty)));
      cm.Parameters.AddWithValue("@InventoryTypeID", Singular.Misc.NothingDBNull(GetProperty(InventoryTypeIDProperty)));
      cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(InventoryIDProperty, scm.Parameters["@InventoryID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@InventoryID", GetProperty(InventoryIDProperty));
    }

    #endregion

  }

}