// Generated 26 Jul 2019 07:53 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Singular;


namespace OETLib.BusinessObjects.Model
{
  [Serializable]
  public class Invoice
   : SingularBusinessBase<Invoice>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> InvoiceIDProperty = RegisterProperty<int>(c => c.InvoiceID, "ID", 0);
    /// <summary>
    /// Gets and sets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key,
    Required(ErrorMessage = "ID required")]
    public int InvoiceID
    {
      get { return GetProperty(InvoiceIDProperty); }
      set { SetProperty(InvoiceIDProperty, value); }
    }

    public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
    /// <summary>
    /// Gets and sets the User value
    /// </summary>
    [Display(Name = "User", Description = ""),
    Required(ErrorMessage = "User required")]
    public int? UserID
    {
      get { return GetProperty(UserIDProperty); }
      set { SetProperty(UserIDProperty, value); }
    }

    public static PropertyInfo<DateTime> InvoiceDateProperty = RegisterProperty<DateTime>(c => c.InvoiceDate, "Invoice Date");
    /// <summary>
    /// Gets and sets the Invoice Date value
    /// </summary>
    [Display(Name = "Invoice Date", Description = ""),
    Required(ErrorMessage = "Invoice Date required")]
    public DateTime InvoiceDate
    {
      get
      {
        return GetProperty(InvoiceDateProperty);
      }
      set
      {
        SetProperty(InvoiceDateProperty, value);
      }
    }

    public static PropertyInfo<decimal?> InvoiceTotalProperty = RegisterProperty<decimal?>(c => c.InvoiceTotal, "Invoice Total", (decimal?)null);
    /// <summary>
    /// Gets and sets the Invoice Total value
    /// </summary>
    [Display(Name = "Invoice Total", Description = "")]
    public decimal? InvoiceTotal
    {
      get { return GetProperty(InvoiceTotalProperty); }
      set { SetProperty(InvoiceTotalProperty, value); }
    }

    public static PropertyInfo<string> NotesProperty = RegisterProperty<string>(c => c.Notes, "Notes");
    /// <summary>
    /// Gets and sets the Notes value
    /// </summary>
    [Display(Name = "Notes", Description = "")]
    public string Notes
    {
      get { return GetProperty(NotesProperty); }
      set { SetProperty(NotesProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(InvoiceIDProperty);
    }

    public override string ToString()
    {
      if (this.InvoiceID.ToString().Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Invoice");
        }
        else
        {
          return String.Format("Blank {0}", "Invoice");
        }
      }
      else
      {
        return this.InvoiceID.ToString();
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewInvoice() method.
    }

    public static Invoice NewInvoice()
    {
      return DataPortal.CreateChild<Invoice>();
    }

    public Invoice()
    {
      MarkAsChild();
    }

    internal static Invoice GetInvoice(SafeDataReader dr)
    {
      var i = new Invoice();
      i.Fetch(dr);
      return i;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(InvoiceIDProperty, sdr.GetInt32(i++));
        LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
        LoadProperty(InvoiceDateProperty, sdr.GetValue(i++));
        LoadProperty(InvoiceTotalProperty, sdr.GetValue(i++));
        LoadProperty(NotesProperty, sdr.GetValue(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      AddPrimaryKeyParam(cm, InvoiceIDProperty);

      cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
      cm.Parameters.AddWithValue("@InvoiceDate", InvoiceDate);
      cm.Parameters.AddWithValue("@InvoiceTotal", Singular.Misc.NothingDBNull(GetProperty(InvoiceTotalProperty)));
      cm.Parameters.AddWithValue("@Notes", Singular.Misc.NothingDBNull(GetProperty(NotesProperty)));

      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(InvoiceIDProperty, scm.Parameters["@InvoiceID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@InvoiceID", GetProperty(InvoiceIDProperty));
    }

    #endregion

  }

}