// Generated 07 Feb 2019 15:07 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.BusinessObjects.Model
{
    [Serializable]
    public class Category
     : SingularBusinessBase<Category>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> CategoryIDProperty = RegisterProperty<int>(c => c.CategoryID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int CategoryID
        {
            get { return GetProperty(CategoryIDProperty); }
        }

        public static PropertyInfo<string> CategoryNameProperty = RegisterProperty<string>(c => c.CategoryName, "Category Name", "");
        /// <summary>
        /// Gets the Category Name value
        /// </summary>
        [Display(Name = "Category Name", Description = ""),
        StringLength(255, ErrorMessage = "Category Name cannot be more than 255 characters")]
        public string CategoryName
        {
            get { return GetProperty(CategoryNameProperty); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date");
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(CategoryIDProperty);
        }

        public override string ToString()
        {
            if (this.CategoryName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Category");
                }
                else
                {
                    return String.Format("Blank {0}", "Category");
                }
            }
            else
            {
                return this.CategoryName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewCategory() method.
        }

        public static Category NewCategory()
        {
            return DataPortal.CreateChild<Category>();
        }

        public Category()
        {
            MarkAsChild();
        }

        internal static Category GetCategory(SafeDataReader dr)
        {
            var c = new Category();
            c.Fetch(dr);
            return c;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(CategoryIDProperty, sdr.GetInt32(i++));
                LoadProperty(CategoryNameProperty, sdr.GetString(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, CategoryIDProperty);

            cm.Parameters.AddWithValue("@CategoryName", GetProperty(CategoryNameProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(CategoryIDProperty, scm.Parameters["@CategoryID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@CategoryID", GetProperty(CategoryIDProperty));
        }

        #endregion

    }

}