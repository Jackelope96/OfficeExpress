// Generated 20 Feb 2019 20:35 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace OETLib.BusinessObjects.Model
{
    [Serializable]
    public class Order
     : SingularBusinessBase<Order>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderIDProperty = RegisterProperty<int>(c => c.OrderID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderID
        {
            get { return GetProperty(OrderIDProperty); }
        }

        public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "Username ", Description = ""),
        Required(ErrorMessage = "Username required"),

        Singular.DataAnnotations.DropDownWeb(typeof(ROUserList))]
        public int? UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<DateTime> OrderDateProperty = RegisterProperty<DateTime>(c => c.OrderDate, "Order Date");
        /// <summary>
        /// Gets and sets the Order Date value
        /// </summary>
        [Display(Name = "Order Date", Description = ""),
        Required(ErrorMessage = "Order Date required")]
        public DateTime OrderDate
        {
            get
            {
                return GetProperty(OrderDateProperty);
            }
            set
            {
                SetProperty(OrderDateProperty, value);
            }
        }

        public static PropertyInfo<DateTime> RequiredDateProperty = RegisterProperty<DateTime>(c => c.RequiredDate, "Required Date");
        /// <summary>
        /// Gets and sets the Required Date value
        /// </summary>
        [Display(Name = "Required Date", Description = ""),
        Required(ErrorMessage = "Required Date required")]
        public DateTime RequiredDate
        {
            get
            {
                return GetProperty(RequiredDateProperty);
            }
            set
            {
                SetProperty(RequiredDateProperty, value);
            }
        }

        public static PropertyInfo<int> ProcessStatusIDProperty = RegisterProperty<int>(c => c.ProcessStatusID, "Process Status");
        /// <summary>
        /// Gets and sets the Process Status value
        /// </summary>
        [Display(Name = "Process Status", Description = ""),
        Required(ErrorMessage = "Process Status required")]
        public int ProcessStatusID
        {
            get { return GetProperty(ProcessStatusIDProperty); }
            set { SetProperty(ProcessStatusIDProperty, value); }
        }

     

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderIDProperty);
        }

        public override string ToString()
        {
            if (this.OrderID.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order");
                }
                else
                {
                    return String.Format("Blank {0}", "Order");
                }
            }
            else
            {
                return this.OrderID.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrder() method.
        }

        public static Order NewOrder()
        {
            return DataPortal.CreateChild<Order>();
        }

        public Order()
        {
            MarkAsChild();
        }

        internal static Order GetOrder(SafeDataReader dr)
        {
            var o = new Order();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(OrderDateProperty, sdr.GetDateTime(i++));
                LoadProperty(RequiredDateProperty, sdr.GetValue(i++));
                LoadProperty(ProcessStatusIDProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, OrderIDProperty);

            cm.Parameters.AddWithValue("@UserID", Singular.Settings.CurrentUserID);
            cm.Parameters.AddWithValue("@OrderDate", OrderDate);
            cm.Parameters.AddWithValue("@RequiredDate", RequiredDate);
            cm.Parameters.AddWithValue("@ProcessStatusID", GetProperty(ProcessStatusIDProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderIDProperty, scm.Parameters["@OrderID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
        }

        #endregion

    }

}