// Generated 18 Feb 2019 14:12 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using Singular.Paging;

namespace OETLib.Server
{
    [Serializable]
    public class ROProductList
     : SingularReadOnlyListBase<ROProductList, ROProduct>
    {
        private int totalRecords = 0;

        public int TotalRecords 
        {
            get
            {
                return this.totalRecords;
            }
        }
        #region " Business Methods "

        public ROProduct GetItem(int ProductID)
        {
            foreach (ROProduct child in this)
            {
                if (child.ProductID == ProductID)
                {
                    return child;
                }
            }
            return null;
        }

        public override string ToString()
        {
            return "Products";
        }

        #endregion

        #region " Data Access "

        [Serializable]
        public class Criteria : CriteriaBase<Criteria>
        {
            private static PropertyInfo<string> productNameProperty = CriteriaBase<Criteria>.RegisterProperty<string>((c) => c.ProductName, string.Empty);
            [Singular.DataAnnotations.TextField, Display(Name = "Filter product")]
            public string ProductName { get; set; }
            public static PropertyInfo<string> ProductNameProperty { get => ProductNameProperty1; set => ProductNameProperty1 = value; }
            public static PropertyInfo<string> ProductNameProperty1 { get => productNameProperty; set => productNameProperty = value; }

            public Criteria()
            {
                ProductName = string.Empty;
            }

        }

        public static ROProductList NewROProductList()
        {
            return new ROProductList();
        }

        public ROProductList()
        {
            // must have parameter-less constructor
        }

        public static ROProductList GetROProductList()
        {
            return DataPortal.Fetch<ROProductList>(new Criteria());
        }

        protected void Fetch(SafeDataReader sdr)
        {
            this.RaiseListChangedEvents = false;
            this.IsReadOnly = false;
            while (sdr.Read())
            {
                this.Add(ROProduct.GetROProduct(sdr));
            }
            this.IsReadOnly = true;
            this.RaiseListChangedEvents = true;
        }

        protected override void DataPortal_Fetch(Object criteria)
        {
            Criteria crit = (Criteria)criteria;
            using (SqlConnection cn = new SqlConnection(Singular.Settings.ConnectionString))
            {
                cn.Open();
                try
                {
                    using (SqlCommand cm = cn.CreateCommand())
                    {
                        cm.CommandType = CommandType.StoredProcedure;
                        cm.CommandText = "GetProcs.getROProductList";
                        using (SafeDataReader sdr = new SafeDataReader(cm.ExecuteReader()))
                        {
                            Fetch(sdr);
                        }
                    }
                }
                finally
                {
                    cn.Close();
                }
            }
        }

        #endregion

    }

}