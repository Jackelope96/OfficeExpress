// Generated 21 Aug 2019 05:47 - Singular Systems Object Generator Version 2.2.699
//<auto-generated/>
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Singular;


namespace OETLib.Documents
{
  [Serializable]
  public class Document
   : SingularBusinessBase<Document>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> DocumentIDProperty = RegisterProperty<int>(c => c.DocumentID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int DocumentID
    {
      get { return GetProperty(DocumentIDProperty); }
    }

    public static PropertyInfo<string> DocumentNameProperty = RegisterProperty<string>(c => c.DocumentName, "Document Name", "");
    /// <summary>
    /// Gets and sets the Document Name value
    /// </summary>
    [Display(Name = "Document Name", Description = ""),
    StringLength(255, ErrorMessage = "Document Name cannot be more than 255 characters")]
    public string DocumentName
    {
      get { return GetProperty(DocumentNameProperty); }
      set { SetProperty(DocumentNameProperty, value); }
    }

    public static PropertyInfo<byte[]> DocumentDataProperty = RegisterProperty<byte[]>(c => c.DocumentData, "Document Data", null);
    /// <summary>
    /// Gets and sets the Document Data value
    /// </summary>
    [Display(Name = "Document Data", Description = "")]
    public byte[] DocumentData
    {
      get
      {
        return GetProperty(DocumentDataProperty);
      }
      set
      {
        SetProperty(DocumentDataProperty, value);
      }
    }

    public static PropertyInfo<SmartDate> CreatedDateTimeProperty = RegisterProperty<SmartDate>(c => c.CreatedDateTime, "Created Date Time");
    /// <summary>
    /// Gets the Created Date Time value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDateTime
    {
      get { return GetProperty(CreatedDateTimeProperty); }
    }

    public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By");
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public int? CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<byte[]> DocumentHashProperty = RegisterProperty<byte[]>(c => c.DocumentHash, "Document Hash");
    /// <summary>
    /// Gets and sets the Document Hash value
    /// </summary>
    [Display(Name = "Document Hash", Description = ""),
    Required(ErrorMessage = "Document Hash required")]
    public byte[] DocumentHash
    {
      get { return GetProperty(DocumentHashProperty); }
      set { SetProperty(DocumentHashProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(DocumentIDProperty);
    }

    public override string ToString()
    {
      if (this.DocumentName.Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Document");
        }
        else
        {
          return String.Format("Blank {0}", "Document");
        }
      }
      else
      {
        return this.DocumentName;
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewDocument() method.
    }

    public static Document NewDocument()
    {
      return DataPortal.CreateChild<Document>();
    }

    public Document()
    {
      MarkAsChild();
    }

    internal static Document GetDocument(SafeDataReader dr)
    {
      var d = new Document();
      d.Fetch(dr);
      return d;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(DocumentIDProperty, sdr.GetInt32(i++));
        LoadProperty(DocumentNameProperty, sdr.GetString(i++));
        LoadProperty(DocumentDataProperty, sdr.GetValue(i++));
        LoadProperty(CreatedDateTimeProperty, sdr.GetSmartDate(i++));
        LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
        LoadProperty(DocumentHashProperty, sdr.GetValue(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      if (this.IsNew)
      {
        LoadProperty(CreatedByProperty, Settings.CurrentUser.UserID);
      }

      AddPrimaryKeyParam(cm, DocumentIDProperty);

      cm.Parameters.AddWithValue("@DocumentName", GetProperty(DocumentNameProperty));
      cm.Parameters.AddWithValue("@DocumentData", Singular.Misc.NothingDBNull(GetProperty(DocumentDataProperty)));
      cm.Parameters.AddWithValue("@CreatedBy", GetProperty(CreatedByProperty));
      cm.Parameters.AddWithValue("@DocumentHash", GetProperty(DocumentHashProperty));

      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(DocumentIDProperty, scm.Parameters["@DocumentID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@DocumentID", GetProperty(DocumentIDProperty));
    }

    #endregion

  }

}